class MailwrapperSettingsController < ApplicationController
  unloadable
  before_filter :find_project, :authorize
  before_filter :find_recipients, :find_issue_statuses, :only => [:add_issue_rule, :mod_issue_rule, :add_news_rule, :mod_news_rule]

  ##
  ## rules for issue
  ##
  def add_issue_rule
    @issue_rule = MailwrapperIssueRule.new(params[:mailwrapper_issue_rule])
 
    if ! (request.get? || request.xhr?)
	  @issue_rule.project_id = @project.id
	  @issue_rule.author = '.*' if @issue_rule.author = ''
      if @issue_rule.save
        flash[:notice] = l(:notice_successful_create)
        redirect_to({ :controller => 'projects', :action => 'settings', :id => @project, :tab => 'mailwrapper' })
        return
      end
    end
    render :layout => !request.xhr?
  end
  
  def mod_issue_rule
	@issue_rule = MailwrapperIssueRule.find(params[:issue_rule_id])
    if ! (request.get? || request.xhr?)
	  @issue_rule.update_attributes(params[:mailwrapper_issue_rule])
	  @issue_rule.author = '.*' if @issue_rule.author = ''
      if @issue_rule.save
        flash[:notice] = l(:notice_successful_update)
        redirect_to({ :controller => 'projects', :action => 'settings', :id => @project, :tab => 'mailwrapper' })
        return
      end
    end
    render :layout => !request.xhr?
  end

  def mov_issue_rule
	@issue_rule = MailwrapperIssueRule.find(params[:issue_rule_id])
    case params[:position]
      when 'highest'
        @issue_rule.move_to_top
      when 'higher'
        @issue_rule.move_higher
      when 'lower'
        @issue_rule.move_lower
      when 'lowest'
        @issue_rule.move_to_bottom
    end if params[:position]
    redirect_to({ :controller => 'projects', :action => 'settings', :id => @project, :tab => 'mailwrapper' })
  end

  def del_issue_rule
    issue_rule = MailwrapperIssueRule.find(params[:issue_rule_id])
	if issue_rule.nil? or ! issue_rule.destroy
	  flash.now[:error] = l(:gui_validation_error)
	else
      flash[:notice] = l(:notice_successful_delete)
	end
    redirect_to({ :controller => 'projects', :action => 'settings', :id => @project, :tab => 'mailwrapper' })
	return
  end

  ##
  ## rules for news
  ##
  def add_news_rule
    @news_rule = MailwrapperNewsRule.new(params[:mailwrapper_news_rule])
 
    if ! (request.get? || request.xhr?)
      if @news_rule.save
        flash[:notice] = l(:notice_successful_create)
        redirect_to({ :controller => 'projects', :action => 'settings', :id => @project, :tab => 'mailwrapper' })
        return
      end
    end
    render :layout => !request.xhr?
  end

  def mod_news_rule
	@news_rule = MailwrapperNewsRule.find(params[:news_rule_id])
    if ! (request.get? || request.xhr?)
	  @news_rule.update_attributes(params[:mailwrapper_news_rule])
      if @news_rule.save
        flash[:notice] = l(:notice_successful_update)
        redirect_to({ :controller => 'projects', :action => 'settings', :id => @project, :tab => 'mailwrapper' })
        return
      end
    end
    render :layout => !request.xhr?
  end

  def del_news_rule
    news_rule = MailwrapperNewsRule.find(params[:news_rule_id])
	if news_rule.nil? or ! news_rule.destroy
	  flash.now[:error] = l(:gui_validation_error)
	else
      flash[:notice] = l(:notice_successful_delete)
	end
    redirect_to({ :controller => 'projects', :action => 'settings', :id => @project, :tab => 'mailwrapper' })
	return
  end

  ##
  ## recipient setting for issue/news rules.
  ##
  def add_recipient
    @recipient = MailwrapperRecipient.new(params[:mailwrapper_recipient])
    if ! (request.get? || request.xhr?)
	  if ! check_duplicated_recipient(@recipient)
        flash.now[:error] = l(:notice_failed_to_save_mailwrapper_recipient)
      elsif @recipient.save
        flash[:notice] = l(:notice_successful_create)
        redirect_to({ :controller => 'projects', :action => 'settings', :id => @project, :tab => 'mailwrapper' })
        return
      else
        flash.now[:error] = l(:gui_validation_error)
      end
    end
  end

  def mod_recipient
    @recipient = MailwrapperRecipient.find(params[:recipient_id])
    if ! (request.get? || request.xhr?)
	  @recipient.update_attributes(params[:mailwrapper_recipient])
	  if ! check_duplicated_recipient(@recipient)
        flash.now[:error] = l(:notice_failed_to_save_mailwrapper_recipient)
      elsif @recipient.save
        flash[:notice] = l(:notice_successful_update)
        redirect_to({ :controller => 'projects', :action => 'settings', :id => @project, :tab => 'mailwrapper' })
        return
      else
        flash.now[:error] = l(:gui_validation_error)
      end
    end
    render :layout => !request.xhr?
  end

  def del_recipient
    recipient = MailwrapperRecipient.find(params[:recipient_id])
	if recipient.nil? or ! recipient.destroy
	  flash.now[:error] = l(:gui_validation_error)
	else
      flash[:notice] = l(:notice_successful_delete)
	end
    redirect_to({ :controller => 'projects', :action => 'settings', :id => @project, :tab => 'mailwrapper' })
	return
  end

  def show
  end

  private
  def find_project
    @project = Project.find(params[:project_id])
  end
  def find_issue_statuses
    @issue_statuses = IssueStatus.find(:all)
  end
  def find_issue_rules
    @issue_rules = MailwrapperIssueRule.find(:all)
  end
  def find_news_rules
    @news_rules = MailwrapperNewsRule.find(:all)
  end
  def find_recipients
    @recipients = MailwrapperRecipient.find(:all)
  end
  def get_issue_rule_last_priority
    rules = MailwrapperIssueRule.find(:first, :order => "priority DESC")
	if rules.nil?
	  return nil
	end
	rules.priority
  end
  def check_duplicated_recipient(r)
    dup = MailwrapperRecipient.find(:all, :conditions => [ 'id != ? AND project_id = ? AND name = ?', r.id, @project.id, r.name ])
	dup.empty?
  end
end

